/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here
 } //_CODE_:button1:12356:

 * Do not rename this tab!
 * =========================================================
 */

public
void buttonResetClick(GButton source, GEvent event) { //_CODE_:buttonReset:770286:
    reset();
    isPaused = true;
} //_CODE_:buttonReset:770286:

public
void buttonPlayClick(GButton source, GEvent event) { //_CODE_:buttonPlay:715536:
    togglePause();
} //_CODE_:buttonPlay:715536:

public
void pxPerStepSliderChange(GSlider source, GEvent event) { //_CODE_:pxPerStepSlider:244416:
    pxPerStep = pxPerStepSlider.getValueI();
    robot1.offsetStep(pxPerStep);
    robot2.offsetStep(pxPerStep);
} //_CODE_:pxPerStepSlider:244416:

public
void robotStartXSliderChange(GSlider source, GEvent event) { //_CODE_:robotStartXSlider:682412:
    robotStartX = robotStartXSlider.getValueI();
    robot1.origin = robotStartX;
    robot2.origin = robotStartX;
} //_CODE_:robotStartXSlider:682412:

public
void bridgeXSliderChange(GSlider source, GEvent event) { //_CODE_:bridgeXSlider:261755:
    bridgeX = bridgeXSlider.getValueI();
} //_CODE_:bridgeXSlider:261755:

public
void robot1FactorChange(GSlider source, GEvent event) { //_CODE_:robot1Factor:703518:
    multiAlgoMultipler = robot1Factor.getValueI();
    robot1.algoFactor = multiAlgoMultipler;
} //_CODE_:robot1Factor:703518:

public
void robot2FactorChange(GSlider source, GEvent event) { //_CODE_:robot2Factor:343440:
    cgAlgoIncrement = robot2Factor.getValueI();
    robot2.algoFactor = cgAlgoIncrement;
} //_CODE_:robot2Factor:343440:

public
void robot1SpeedChange(GSlider source, GEvent event) { //_CODE_:robot1Speed:488491:
    println("robot1Speed - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:robot1Speed:488491:

public
void robot2SpeedChange(GSlider source, GEvent event) { //_CODE_:robot2Speed:810337:
    println("robot2Speed - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:robot2Speed:810337:


// Create all the GUI controls.
// autogenerated do not edit
public
void createGUI() {
    G4P.messagesEnabled(false);
    G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
    G4P.setMouseOverEnabled(false);
    surface.setTitle("Sketch Window");
    buttonReset = new GButton(this, 1025, 560, 80, 30);
    buttonReset.setText("Reset");
    buttonReset.setLocalColorScheme(GCScheme.RED_SCHEME);
    buttonReset.addEventHandler(this, "buttonResetClick");
    buttonPlay = new GButton(this, 1145, 560, 80, 30);
    buttonPlay.setText("Play/Pause");
    buttonPlay.addEventHandler(this, "buttonPlayClick");
    label1 = new GLabel(this, 1025, 250, 200, 20);
    label1.setText("Step Size (px)");
    label1.setLocalColorScheme(GCScheme.CYAN_SCHEME);
    label1.setOpaque(false);
    pxPerStepSlider = new GSlider(this, 1025, 265, 200, 40, 10.0);
    pxPerStepSlider.setShowValue(true);
    pxPerStepSlider.setShowLimits(true);
    pxPerStepSlider.setLimits(15, 5, 50);
    pxPerStepSlider.setNumberFormat(G4P.INTEGER, 0);
    pxPerStepSlider.setLocalColorScheme(GCScheme.CYAN_SCHEME);
    pxPerStepSlider.setOpaque(false);
    pxPerStepSlider.addEventHandler(this, "pxPerStepSliderChange");
    robotStartXSlider = new GSlider(this, 1025, 330, 200, 40, 10.0);
    robotStartXSlider.setShowValue(true);
    robotStartXSlider.setShowLimits(true);
    robotStartXSlider.setLimits(500, 0, 1000);
    robotStartXSlider.setNumberFormat(G4P.INTEGER, 0);
    robotStartXSlider.setLocalColorScheme(GCScheme.GREEN_SCHEME);
    robotStartXSlider.setOpaque(false);
    robotStartXSlider.addEventHandler(this, "robotStartXSliderChange");
    bridgeXSlider = new GSlider(this, 1025, 395, 200, 40, 10.0);
    bridgeXSlider.setShowValue(true);
    bridgeXSlider.setShowLimits(true);
    bridgeXSlider.setLimits(100, 0, 1000);
    bridgeXSlider.setNumberFormat(G4P.INTEGER, 0);
    bridgeXSlider.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
    bridgeXSlider.setOpaque(false);
    bridgeXSlider.addEventHandler(this, "bridgeXSliderChange");
    robot1Factor = new GSlider(this, 1025, 450, 90, 40, 10.0);
    robot1Factor.setShowValue(true);
    robot1Factor.setShowLimits(true);
    robot1Factor.setLimits(2, 2, 10);
    robot1Factor.setNumberFormat(G4P.INTEGER, 0);
    robot1Factor.setOpaque(false);
    robot1Factor.addEventHandler(this, "robot1FactorChange");
    robot2Factor = new GSlider(this, 1135, 450, 90, 40, 10.0);
    robot2Factor.setShowValue(true);
    robot2Factor.setShowLimits(true);
    robot2Factor.setLimits(1, 1, 25);
    robot2Factor.setNumberFormat(G4P.INTEGER, 0);
    robot2Factor.setLocalColorScheme(GCScheme.RED_SCHEME);
    robot2Factor.setOpaque(false);
    robot2Factor.addEventHandler(this, "robot2FactorChange");
    robot1Speed = new GSlider(this, 1025, 515, 90, 40, 10.0);
    robot1Speed.setShowValue(true);
    robot1Speed.setShowLimits(true);
    robot1Speed.setLimits(1, 1, 10);
    robot1Speed.setNumberFormat(G4P.INTEGER, 0);
    robot1Speed.setOpaque(false);
    robot1Speed.addEventHandler(this, "robot1SpeedChange");
    robot2Speed = new GSlider(this, 1135, 515, 90, 40, 10.0);
    robot2Speed.setShowValue(true);
    robot2Speed.setShowLimits(true);
    robot2Speed.setLimits(1, 1, 10);
    robot2Speed.setNumberFormat(G4P.INTEGER, 0);
    robot2Speed.setLocalColorScheme(GCScheme.RED_SCHEME);
    robot2Speed.setOpaque(false);
    robot2Speed.addEventHandler(this, "robot2SpeedChange");
    label2 = new GLabel(this, 1025, 315, 200, 20);
    label2.setText("Pixels Per Step");
    label2.setLocalColorScheme(GCScheme.GREEN_SCHEME);
    label2.setOpaque(false);
    label3 = new GLabel(this, 1025, 380, 200, 20);
    label3.setText("Bridge Location");
    label3.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
    label3.setOpaque(false);
    label4 = new GLabel(this, 1025, 435, 200, 20);
    label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
    label4.setText("Algorithm Increase Factor");
    label4.setLocalColorScheme(GCScheme.SCHEME_15);
    label4.setOpaque(false);
    label5 = new GLabel(this, 1025, 500, 200, 20);
    label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
    label5.setText("Robot Speeds");
    label5.setLocalColorScheme(GCScheme.SCHEME_15);
    label5.setOpaque(false);
}

// Variable declarations
// autogenerated do not edit
GButton buttonReset;
GButton buttonPlay;
GLabel label1;
GSlider pxPerStepSlider;
GSlider robotStartXSlider;
GSlider bridgeXSlider;
GSlider robot1Factor;
GSlider robot2Factor;
GSlider robot1Speed;
GSlider robot2Speed;
GLabel label2;
GLabel label3;
GLabel label4;
GLabel label5;
